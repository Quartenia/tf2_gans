# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/core.ipynb (unless otherwise specified).

__all__ = ['TrainerBase']

# Cell
class TrainerBase(object):
    "Base class for GANs trainer"
    def __init__(self):
        self.has_trained = False

    def set_training_parameters(self,
                                epochs=10,
                                continue_training=False,
                                save_fq=0,
                                preview_fq=5,
                                progress_fn=None,
                                preview_fn=None):
        self.epochs = epochs
        self.continue_training = continue_training
        self.save_fq = save_fq
        self.preview_fq = preview_fq
        self.progress_fn = progress_fn
        self.preview_fn = preview_fn

        print("parameters set")

    def train_epoch(self):
        pass

    def preprocess_data(self, raw_data):
        self.raw_data = raw_data
        return self.raw_data

    def dataset_generator(self):
        pass

    def create_tf_dataset(self):
        self.dataset = tf.data.Dataset.from_generator(self.dataset_generator,
                                                      self.output_type)
        self.dataset = self.dataset.batch(self.batch_size)
        return self.dataset

    def init_dataset(self, raw_data, input_size, crop_size, batch_size=1):
        self.input_size = input_size
        self.crop_size = crop_size
        self.batch_size = batch_size
        self.output_type = tf.float32
        self.preprocess_data(raw_data)
        self.create_tf_dataset()
        return self.dataset

    def train(self):
        if self.progress_fn:
            self.progress_fn(0.0)
        self.has_trained = True

        if self.continue_training:
            pass
        else:
            # reset weights
            pass

        for epoch in range(1, self.epochs+1):
            self.train_epoch()

            self.end_epoch(epoch)

        print("saving last epoch")

    def end_epoch(self, epoch):
        if self.progress_fn:
            self.progress_fn((100*epoch)//self.epochs)

        if epoch % (self.epochs//self.preview_fq) == 0:
            if self.preview_fn:
                self.preview_fn(self.generate_preview())

        print("Epoch: ", epoch)

        if (self.epochs//self.save_fq) == 0:
            self.save_models()

    def generate_preview(self):
        return {}

    def save_models(self):
        pass

    def generate_sample(self):
        pass

    def train_step(self, input_image, target):
        pass
